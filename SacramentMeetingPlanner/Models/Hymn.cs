/*using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace SacramentMeetingPlanner.Models
{
    public class Hymn
    {
        public int HymnId { get; set; }

        public string HymnName { get; set; }

        public int HymnNumber { get; set; }
    }
}*/
// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using SacramentMeetingPlanner.Models;
//
//    var hymns = Hymns.FromJson(jsonString);

/*namespace SacramentMeetingPlanner.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Hymns
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("songNumber")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long SongNumber { get; set; }
    }

    public enum Artist { Hymnal };

    public enum BookFilter { Hymnal };

    public partial class Hymns
    {
        public static Dictionary<string, Hymns> FromJson(string json) => JsonConvert.DeserializeObject<Dictionary<string, Hymns>>(json, SacramentMeetingPlanner.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Dictionary<string, Hymns> self) => JsonConvert.SerializeObject(self, SacramentMeetingPlanner.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ArtistConverter.Singleton,
                BookFilterConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ArtistConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Artist) || t == typeof(Artist?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Hymnal")
            {
                return Artist.Hymnal;
            }
            throw new Exception("Cannot unmarshal type Artist");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Artist)untypedValue;
            if (value == Artist.Hymnal)
            {
                serializer.Serialize(writer, "Hymnal");
                return;
            }
            throw new Exception("Cannot marshal type Artist");
        }

        public static readonly ArtistConverter Singleton = new ArtistConverter();
    }

    internal class BookFilterConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(BookFilter) || t == typeof(BookFilter?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "hymnal")
            {
                return BookFilter.Hymnal;
            }
            throw new Exception("Cannot unmarshal type BookFilter");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (BookFilter)untypedValue;
            if (value == BookFilter.Hymnal)
            {
                serializer.Serialize(writer, "hymnal");
                return;
            }
            throw new Exception("Cannot marshal type BookFilter");
        }

        public static readonly BookFilterConverter Singleton = new BookFilterConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
*/